using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web.Http;
using AutoMapper;
using Vidly.Dtos;
using Vidly.Models;

namespace Vidly.Controllers.Api
{
    public class CustomersController : ApiController
    {
        private ApplicationDbContext _context;

        public CustomersController()
        {
            _context = new ApplicationDbContext();
        }

        // GET /api/customers
        //query is null unless typeahead
        public IHttpActionResult GetCustomers(string query = null)
        {
            //Select the CustomerDto from Customer using automapper
            //Eager loading with .Include()
            var customersQuery = _context.Customers
                .Include(c => c.MembershipType);

            if (!String.IsNullOrWhiteSpace(query))
                customersQuery = customersQuery.Where(c => c.Name.Contains(query));

            var customerDtos = customersQuery
                .ToList()
                .Select(Mapper.Map<Customer, CustomerDto>);

            return Ok(customerDtos);
//            var customerDtos = _context.Customers
//                .Include(c=>c.MembershipType)
//                .ToList()
//                .Select(Mapper.Map<Customer, CustomerDto>);
//            return Ok(customerDtos);
        }

        // GET /api/customers/id    Select a single customer
        public IHttpActionResult GetCustomer(int id)
        {
            //Cannot use .Select linq method as only selecting one object of customer
            var customer = _context.Customers.SingleOrDefault(c => c.Id == id);
            if (customer == null)
            {
                return NotFound();
            }
            //Maps and returns customer; From Customer to CustomerDto
            return Ok(Mapper.Map<Customer, CustomerDto>(customer));

        }

        //Creating a customer POST /api/customers
        //Model Binding 
        [HttpPost]
        public IHttpActionResult CreateCustomer(CustomerDto customerDto)
        {
            if (!ModelState.IsValid)
            {
                //throw new HttpResponseException(HttpStatusCode.BadRequest);
                return BadRequest();
            }
            //Maps from CustomerDto to Customer 
            var customer = Mapper.Map<CustomerDto, Customer>(customerDto);
            _context.Customers.Add(customer);
            _context.SaveChanges();
            //Id is generated by database as it is not explictly created but implicity through db creation
            customerDto.Id = customer.Id;
            //To create /api/customers/id using URI 
            //In Restful convention URI is create and sent 
            return Created(new Uri(Request.RequestUri + "/" + customer.Id), customerDto);
        }

        //PUT /api/customer/1
        [HttpPut]
        public IHttpActionResult UpdateCustomer(int id, CustomerDto customerDto)
        {
            if (!ModelState.IsValid)
            {
                throw new HttpResponseException(HttpStatusCode.BadRequest);
            }
            //Select the entry in the table
            var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);

            //Checks if it's null and throws not found exception
            if (customerInDb == null)
            {
                throw new HttpResponseException(HttpStatusCode.NotFound);
            }

            //Passing 2 argument
            Mapper.Map(customerDto, customerInDb);

            _context.SaveChanges();

            return Ok();
        }
        // DELETE /api/customer/1
        [HttpDelete]
        public IHttpActionResult DeleteCustomer(int id)
        {
            var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);
            if (customerInDb == null)
            {
                throw new HttpResponseException(HttpStatusCode.NotFound);
            }
            //Saved in the memory
            _context.Customers.Remove(customerInDb);
            //Presisted in the Database
            _context.SaveChanges();

            return Ok();
        }
    }
}
